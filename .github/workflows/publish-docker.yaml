name: Publish Docker images

on:
  workflow_dispatch:
    inputs:
      dockerfile:
        description: 'Which Dockerfile to use (default is Dockerfile)'
        required: false
        default: Dockerfile

env:
  REGISTRY_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/github-actions-test

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux/amd64, linux/arm64 ]
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          if [[ "${{ github.event.inputs.dockerfile }}" == "Dockerfile.native" ]]; then
            echo "TAG_SUFFIX=-native" >> $GITHUB_ENV
          else
            echo "TAG_SUFFIX=" >> $GITHUB_ENV
          fi

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch,suffix=${{ env.TAG_SUFFIX }}
            type=ref,event=pr,suffix=${{ env.TAG_SUFFIX }}
            type=semver,pattern={{version}},suffix=${{ env.TAG_SUFFIX }}
            type=raw,value=latest,suffix=${{ env.TAG_SUFFIX }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ${{ github.event.inputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.REGISTRY_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Prepare
        run: |
          if [[ "${{ github.event.inputs.dockerfile }}" == "Dockerfile.native" ]]; then
            echo "TAG_SUFFIX=-native" >> $GITHUB_ENV
          else
            echo "TAG_SUFFIX=" >> $GITHUB_ENV
          fi

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch,suffix=${{ env.TAG_SUFFIX }}
            type=ref,event=pr,suffix=${{ env.TAG_SUFFIX }}
            type=semver,pattern={{version}},suffix=${{ env.TAG_SUFFIX }}
            type=raw,value=latest,suffix=${{ env.TAG_SUFFIX }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}